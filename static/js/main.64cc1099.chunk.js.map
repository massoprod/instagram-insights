{"version":3,"sources":["components/Insights.module.css","components/Form.module.css","images/instagram-logo.jpeg","store/store.js","components/Insights.js","components/Form.js","components/Main.js","App.js","serviceWorker.js","index.js","components/Main.module.css"],"names":["module","exports","AppContext","createContext","AppProvider","state","Provider","value","this","props","children","Component","AppConsumer","Consumer","Insights","data","className","style","wrapper","row","name","followersData","followingData","Form","useState","userId","setUserId","isLoading","setLoading","isError","setFollowersData","setFollowingData","mediaData","setMediaData","instagramBaseUrl","followingQuery","followersQuery","mediasQuery","getData","a","alert","axios","get","followersResponse","status","user","edge_followed_by","count","followingResponse","edge_follow","mediaResponse","edge_owner_to_timeline_media","loader","loaderLabel","label","href","target","type","required","onChange","e","input","placeholder","onClick","button","IG_LOGO","require","Main","src","alt","igLogo","title","subtitle","App","Boolean","window","location","hostname","match","Application","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64cc1099.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Insights_wrapper__1fO9B\",\"row\":\"Insights_row__3JTjA\",\"name\":\"Insights_name__n8UXp\",\"value\":\"Insights_value__38uFF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Form_wrapper__2JLZ4\",\"loader\":\"Form_loader__5Q-aI\",\"loaderLabel\":\"Form_loaderLabel__13akk\",\"label\":\"Form_label__1ILmH\",\"input\":\"Form_input__Vfo9P\",\"button\":\"Form_button__DF5Bm\"};","module.exports = __webpack_public_path__ + \"static/media/instagram-logo.6517a7ee.jpeg\";","import React, { createContext, Component } from 'react';\n\nconst AppContext = createContext({\n});\n\nexport class AppProvider extends Component {;\n\n  state = {\n  };\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport const AppConsumer = AppContext.Consumer;","import React from 'react';\nimport style from './Insights.module.css';\n\nconst Insights = ({data = null}) => {\n\n  return (\n    <div className={style.wrapper}>\n      <div className={style.row}>\n        <span className={style.name}>\n          Followers\n        </span>\n        <span className={style.value}>\n          {data && data.followersData ? data.followersData : 0}\n        </span>\n      </div>\n\n      <div className={style.row}>\n        <span className={style.name}>\n          Following\n        </span>\n        <span className={style.value}>\n          {data && data.followingData ? data.followingData : 0}\n        </span>\n      </div>\n    </div>\n  )\n};\n\nexport default Insights;","import React, {useState} from 'react';\nimport style from './Form.module.css';\nimport axios from 'axios';\nimport Insights from './Insights';\n\nconst Form = () => {\n  const [userId, setUserId] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n  const [isError, setError] = useState(false);\n  const [followersData, setFollowersData] = useState(null);\n  const [followingData, setFollowingData] = useState(null);\n  const [mediaData, setMediaData] = useState(null);\n\n  const instagramBaseUrl = 'https://www.instagram.com/graphql/query/';\n  const followingQuery = `?query_hash=58712303d941c6855d4e888c5f0cd22f&variables=%7B%22id%22%3A%22${userId}%22%2C%22first%22%3A24%7D`;\n  const followersQuery = `?query_hash=37479f2b8209594dde7facb0d904896a&variables=%7B%22id%22%3A%22${userId}%22%2C%22first%22%3A24%7D`;\n  const mediasQuery = `?query_hash=f2405b236d85e8296cf30347c9f08c2a&variables=%7B%22id%22%3A%22${userId}%22%2C%22first%22%3A12%7D`;\n\n  const getData = async () => {\n    if (userId === null) {\n      alert('Insert User ID, please.');\n      return false;\n    }\n\n    setLoading(true);\n\n    const followersResponse = await axios.get(`${instagramBaseUrl}${followersQuery}`);\n\n    if (followersResponse && followersResponse.data.status === 'ok') {\n      setFollowersData(followersResponse.data.data.user.edge_followed_by.count)\n\n      const followingResponse = await axios.get(`${instagramBaseUrl}${followingQuery}`);\n\n      if (followingResponse && followingResponse.data.status === 'ok') {\n        setFollowingData(followingResponse.data.data.user.edge_follow.count)\n\n        const mediaResponse = await axios.get(`${instagramBaseUrl}${mediasQuery}`);\n\n        if (mediaResponse && mediaResponse.data.status === 'ok') {\n          setMediaData(mediaResponse.data.data.user.edge_owner_to_timeline_media)\n        }\n      }\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className={style.wrapper}>\n      {isLoading && <div className={style.loader}><span className={style.loaderLabel}>LOADING DATA...</span></div>}\n      {isError !== false && <div>Error, please try again</div>}\n      <span className={style.label}>\n        User ID <a href=\"https://codeofaninja.com/tools/find-instagram-user-id\" target=\"_blank\"><i>generate here</i></a>\n      </span>\n      <input\n        type='text'\n        required={true}\n        value={userId === null ? '' : userId}\n        onChange={e => setUserId(e.target.value)}\n        className={style.input}\n        placeholder=\"User ID ...\"\n      />\n      <button type='button' onClick={getData} className={style.button}>\n        Submit\n      </button>\n      <Insights\n        data={{followersData, followingData, mediaData}}\n      />\n    </div>\n  );\n}\n\nexport default Form;","import React from 'react';\nimport style from './Main.module.css';\nimport Form from './Form';\n\nconst IG_LOGO = require('../images/instagram-logo.jpeg');\n\nconst Main = () => {\n  return (\n    <div className={style.wrapper}>\n      <img src={IG_LOGO} alt='Instagram logo' className={style.igLogo} />\n      <span className={style.title}>\n        Instagram insights\n      </span>\n      <span className={style.subtitle}>\n        by <a href=\"http://masso.sk/\" target=\"_blank\">Masso dev.</a>\n      </span>\n      <Form />\n    </div>\n  )\n};\n\nexport default Main;","import React from 'react';\nimport {AppConsumer} from './store/store';\nimport Main from './components/Main';\n\nconst App = () => (\n  <div className=\"container\">\n    <AppConsumer>\n      {value => (\n        <Main />\n      )}\n    </AppConsumer>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppProvider } from './store/store';\n\nconst Application = () => (\n  <AppProvider>\n    <App />\n  </AppProvider>\n);\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Main_wrapper__2Fnja\",\"igLogo\":\"Main_igLogo__Ulz9r\",\"title\":\"Main_title__PONBW\",\"subtitle\":\"Main_subtitle__3J8d7\"};"],"sourceRoot":""}